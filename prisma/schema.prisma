generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String?
  resumeText        String?        @db.Text
  resumeUrl         String?
  isPremium         Boolean        @default(false)
  stripeCustomerId  String?        @unique
  subscriptionId    String?
  subscriptionEnd   DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  searches          Search[]
  applications      Application[]
  savedJobs         SavedJob[]
  searchHistory     SearchHistory[]
}

model Job {
  id                String         @id @default(uuid())
  externalId        String?        @unique
  title             String
  company           String
  location          String
  description       String         @db.Text
  url               String
  applyUrl          String?
  salary            String?
  type              String?
  postedDate        DateTime?
  scrapedAt         DateTime       @default(now())
  source            String         // 'indeed', 'linkedin', 'glassdoor', etc.
  isActive          Boolean        @default(true)
  
  applications      Application[]
  savedJobs         SavedJob[]
  
  @@index([title, company])
  @@index([location])
  @@index([scrapedAt])
}

model Search {
  id                String         @id @default(uuid())
  userId            String
  query             String
  location          String?
  jobType           String?
  createdAt         DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id])
  
  @@index([userId, createdAt])
}

model Application {
  id                String         @id @default(uuid())
  userId            String
  jobId             String
  status            String         @default("applied") // applied, interviewing, rejected, accepted
  appliedAt         DateTime       @default(now())
  notes             String?        @db.Text
  
  user              User           @relation(fields: [userId], references: [id])
  job               Job            @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
}

model SavedJob {
  id                String         @id @default(uuid())
  userId            String
  jobId             String
  savedAt           DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id])
  job               Job            @relation(fields: [jobId], references: [id])
  
  @@unique([userId, jobId])
}

model SearchHistory {
  id                String         @id @default(uuid())
  userId            String
  query             String
  location          String?
  resultsCount      Int
  createdAt         DateTime       @default(now())
  
  user              User           @relation(fields: [userId], references: [id])
} 